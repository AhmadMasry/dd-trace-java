apply plugin: 'com.diffplug.spotless'

// This definition is needed since the spotless file is used from stand alone projects
def configPath = rootProject.hasProperty('sharedConfigDirectory') ? sharedConfigDirectory : project.rootProject.rootDir.path + '/gradle'

spotless {
  java {
    toggleOffOn()
    googleJavaFormat()
  }
  groovyGradle {
    toggleOffOn()
    // same as groovy, but for .gradle (defaults to '*.gradle')
    target '*.gradle', '**/gradle/*.gradle'
    greclipse().configFile(configPath + '/enforcement/spotless-groovy.properties')
  }
  kotlinGradle {
    toggleOffOn()
    // same as kotlin, but for .gradle.kts files (defaults to '*.gradle.kts')
    target '*.gradle.kts'
    ktfmt()
    ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])
  }

  //  groovy {
  //    excludeJava() // excludes all Java sources within the Groovy source dirs from formatting
  //    // the Groovy Eclipse formatter extends the Java Eclipse formatter,
  //    // so it formats Java files by default (unless `excludeJava` is used).
  //
  //    targetExclude '**/*Test.groovy' // Current formatting configuration is not great for our tests.
  //    greclipse().configFile(project.rootProject.rootDir.path + '/gradle/enforcement/spotless-groovy.properties')
  //  }
  scala {
    toggleOffOn()
    scalafmt()
  }
  kotlin {
    toggleOffOn()
    //    ktfmt() // Requires newer version of java
    ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])
  }

  format 'misc', {
    toggleOffOn()
    target '**/.gitignore', '**/*.md', '**/*.sh'
    targetExclude '**/build/**', '**/integrations-core/**' // Exclude git submodule from evaluation.
    indentWithSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }

  format 'xml', {
    toggleOffOn()
    target '**/*.xml', '**/*.xsd'
    targetExclude '**/build/**', '**/integrations-core/**' // Exclude git submodule from evaluation.
    trimTrailingWhitespace()
    endWithNewline()
    eclipseWtp('xml').configFile(configPath + '/enforcement/spotless-xml.properties')
  }
}

task formatCode(dependsOn: ['spotlessApply'])
check.dependsOn 'spotlessCheck'
