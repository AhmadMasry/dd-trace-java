package datadog.trace.agent.tooling.muzzle;

import static datadog.trace.util.Strings.getClassName;

import datadog.trace.agent.tooling.Instrumenter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import net.bytebuddy.ClassFileVersion;
import net.bytebuddy.asm.AsmVisitorWrapper;
import net.bytebuddy.description.field.FieldDescription;
import net.bytebuddy.description.field.FieldList;
import net.bytebuddy.description.method.MethodDescription;
import net.bytebuddy.description.method.MethodList;
import net.bytebuddy.description.type.TypeDescription;
import net.bytebuddy.implementation.Implementation;
import net.bytebuddy.jar.asm.ClassVisitor;
import net.bytebuddy.jar.asm.ClassWriter;
import net.bytebuddy.jar.asm.MethodVisitor;
import net.bytebuddy.jar.asm.Opcodes;
import net.bytebuddy.jar.asm.Type;
import net.bytebuddy.matcher.ElementMatcher;
import net.bytebuddy.pool.TypePool;

/** Visit a class and add: a private instrumenationMuzzle field and getter */
public class MuzzleVisitor implements AsmVisitorWrapper {
  public static final String MUZZLE_FIELD_NAME = "instrumentationMuzzle";
  public static final String MUZZLE_METHOD_NAME = "getInstrumentationMuzzle";

  private final File targetDir;

  public MuzzleVisitor(File targetDir) {
    this.targetDir = targetDir;
  }

  @Override
  public int mergeWriter(int flags) {
    return flags | ClassWriter.COMPUTE_MAXS;
  }

  @Override
  public int mergeReader(int flags) {
    return flags;
  }

  @Override
  public ClassVisitor wrap(
      TypeDescription instrumentedType,
      ClassVisitor classVisitor,
      Implementation.Context implementationContext,
      TypePool typePool,
      FieldList<FieldDescription.InDefinedShape> fields,
      MethodList<?> methods,
      int writerFlags,
      int readerFlags) {
    return new InsertSafetyMatcher(
        classVisitor,
        implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6));
  }

  public class InsertSafetyMatcher extends ClassVisitor {
    private final boolean frames;

    private String instrumentationClassName;
    private Instrumenter.Default instrumenter;

    public InsertSafetyMatcher(ClassVisitor classVisitor, boolean frames) {
      super(Opcodes.ASM7, classVisitor);
      this.frames = frames;
    }

    @Override
    public void visit(
        final int version,
        final int access,
        final String name,
        final String signature,
        final String superName,
        final String[] interfaces) {
      this.instrumentationClassName = name;
      try {
        instrumenter =
            (Instrumenter.Default)
                MuzzleVisitor.class
                    .getClassLoader()
                    .loadClass(getClassName(instrumentationClassName))
                    .getDeclaredConstructor()
                    .newInstance();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
      super.visit(version, access, name, signature, superName, interfaces);
    }

    @Override
    public MethodVisitor visitMethod(
        final int access,
        final String name,
        final String descriptor,
        final String signature,
        final String[] exceptions) {
      if (MUZZLE_METHOD_NAME.equals(name)) {
        // muzzle getter has been generated by previous compilation, ignore and replace in visitEnd
        return null;
      }
      return super.visitMethod(access, name, descriptor, signature, exceptions);
    }

    @Override
    public void visitEnd() {
      File muzzleClass = new File(targetDir, instrumentationClassName + "$Muzzle.class");
      try {
        muzzleClass.getParentFile().mkdirs();
        Files.write(muzzleClass.toPath(), generateMuzzleClass());
      } catch (IOException e) {
        throw new RuntimeException(e);
      }

      MethodVisitor mv =
          super.visitMethod(
              Opcodes.ACC_PROTECTED,
              MUZZLE_METHOD_NAME,
              "()Ldatadog/trace/agent/tooling/muzzle/ReferenceMatcher;",
              null,
              null);

      mv.visitCode();

      mv.visitFieldInsn(
          Opcodes.GETSTATIC,
          instrumentationClassName + "$Muzzle",
          MUZZLE_FIELD_NAME,
          Type.getDescriptor(ReferenceMatcher.class));

      mv.visitInsn(Opcodes.ARETURN);
      mv.visitMaxs(0, 0);
      mv.visitEnd();

      super.visitEnd();
    }

    private Reference[] generateReferences() {
      // track sources we've generated references from to avoid recursion
      final Set<String> referenceSources = new HashSet<>();
      final Map<String, Reference> references = new LinkedHashMap<>();
      final Set<String> adviceClasses = new HashSet<>();
      instrumenter.adviceTransformations(
          new Instrumenter.AdviceTransformation() {
            @Override
            public void applyAdvice(
                ElementMatcher<? super MethodDescription> matcher, String name) {
              adviceClasses.add(name);
            }
          });
      for (String adviceClass : adviceClasses) {
        if (referenceSources.add(adviceClass)) {
          for (Map.Entry<String, Reference> entry :
              ReferenceCreator.createReferencesFrom(
                      adviceClass, ReferenceMatcher.class.getClassLoader())
                  .entrySet()) {
            Reference toMerge = references.get(entry.getKey());
            if (null == toMerge) {
              references.put(entry.getKey(), entry.getValue());
            } else {
              references.put(entry.getKey(), toMerge.merge(entry.getValue()));
            }
          }
        }
      }
      return references.values().toArray(new Reference[0]);
    }

    /**
     * This code is generated in a separate side-class to take advantage of
     * initialization-on-demand:
     *
     * <pre>
     * static final ReferenceMatcher instrumentationMuzzle = new ReferenceMatcher(
     *     new String[] {
     *       // helper class names
     *     },
     *     new Reference[] {
     *       // reference builders
     *     });
     * </pre>
     */
    private byte[] generateMuzzleClass() {
      String muzzleClassName = instrumentationClassName + "$Muzzle";

      ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
      cw.visit(Opcodes.V1_7, Opcodes.ACC_ABSTRACT, muzzleClassName, null, "java/lang/Object", null);

      cw.visitField(
          Opcodes.ACC_STATIC + Opcodes.ACC_FINAL,
          MUZZLE_FIELD_NAME,
          Type.getDescriptor(ReferenceMatcher.class),
          null,
          null);

      try {
        final MethodVisitor mv = cw.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null);

        mv.visitCode();

        mv.visitTypeInsn(Opcodes.NEW, "datadog/trace/agent/tooling/muzzle/ReferenceMatcher");
        mv.visitInsn(Opcodes.DUP);

        String[] helperNames = instrumenter.helperClassNames();
        mv.visitLdcInsn(helperNames.length);
        mv.visitTypeInsn(Opcodes.ANEWARRAY, "java/lang/String");

        for (int i = 0; i < helperNames.length; ++i) {
          mv.visitInsn(Opcodes.DUP);
          mv.visitLdcInsn(i);
          mv.visitLdcInsn(helperNames[i]);
          mv.visitInsn(Opcodes.AASTORE);
        }

        Reference[] references = generateReferences();
        mv.visitLdcInsn(references.length);
        mv.visitTypeInsn(Opcodes.ANEWARRAY, "datadog/trace/agent/tooling/muzzle/Reference");

        for (int i = 0; i < references.length; ++i) {
          mv.visitInsn(Opcodes.DUP);
          mv.visitLdcInsn(i);
          mv.visitTypeInsn(Opcodes.NEW, "datadog/trace/agent/tooling/muzzle/Reference$Builder");
          mv.visitInsn(Opcodes.DUP);
          mv.visitLdcInsn(references[i].className);
          mv.visitMethodInsn(
              Opcodes.INVOKESPECIAL,
              "datadog/trace/agent/tooling/muzzle/Reference$Builder",
              "<init>",
              "(Ljava/lang/String;)V",
              false);
          for (Reference.Source source : references[i].sources) {
            mv.visitLdcInsn(source.name);
            mv.visitLdcInsn(source.line);
            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withSource",
                "(Ljava/lang/String;I)Ldatadog/trace/agent/tooling/muzzle/Reference$Builder;",
                false);
          }
          for (Reference.Flag flag : references[i].flags) {
            mv.visitFieldInsn(
                Opcodes.GETSTATIC,
                "datadog/trace/agent/tooling/muzzle/Reference$Flag",
                flag.name(),
                "Ldatadog/trace/agent/tooling/muzzle/Reference$Flag;");
            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withFlag",
                "(Ldatadog/trace/agent/tooling/muzzle/Reference$Flag;)Ldatadog/trace/agent/tooling/muzzle/Reference$Builder;",
                false);
          }
          if (null != references[i].superName) {
            mv.visitLdcInsn(references[i].superName);
            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withSuperName",
                "(Ljava/lang/String;)Ldatadog/trace/agent/tooling/muzzle/Reference$Builder;",
                false);
          }
          for (String interfaceName : references[i].interfaces) {
            mv.visitLdcInsn(interfaceName);
            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withInterface",
                "(Ljava/lang/String;)Ldatadog/trace/agent/tooling/muzzle/Reference$Builder;",
                false);
          }
          for (Reference.Field field : references[i].fields) {
            { // sources
              mv.visitLdcInsn(field.sources.length);
              mv.visitTypeInsn(
                  Opcodes.ANEWARRAY, "datadog/trace/agent/tooling/muzzle/Reference$Source");

              int j = 0;
              for (Reference.Source source : field.sources) {
                mv.visitInsn(Opcodes.DUP);
                mv.visitLdcInsn(j);

                mv.visitTypeInsn(
                    Opcodes.NEW, "datadog/trace/agent/tooling/muzzle/Reference$Source");
                mv.visitInsn(Opcodes.DUP);
                mv.visitLdcInsn(source.name);
                mv.visitLdcInsn(source.line);
                mv.visitMethodInsn(
                    Opcodes.INVOKESPECIAL,
                    "datadog/trace/agent/tooling/muzzle/Reference$Source",
                    "<init>",
                    "(Ljava/lang/String;I)V",
                    false);

                mv.visitInsn(Opcodes.AASTORE);
                ++j;
              }
            }

            { // flags
              mv.visitLdcInsn(field.flags.length);
              mv.visitTypeInsn(
                  Opcodes.ANEWARRAY, "datadog/trace/agent/tooling/muzzle/Reference$Flag");

              int j = 0;
              for (Reference.Flag flag : field.flags) {
                mv.visitInsn(Opcodes.DUP);
                mv.visitLdcInsn(j);
                mv.visitFieldInsn(
                    Opcodes.GETSTATIC,
                    "datadog/trace/agent/tooling/muzzle/Reference$Flag",
                    flag.name(),
                    "Ldatadog/trace/agent/tooling/muzzle/Reference$Flag;");
                mv.visitInsn(Opcodes.AASTORE);
                ++j;
              }
            }

            mv.visitLdcInsn(field.name);
            mv.visitLdcInsn(field.fieldType);

            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withField",
                Type.getMethodDescriptor(
                    Reference.Builder.class.getMethod(
                        "withField",
                        Reference.Source[].class,
                        Reference.Flag[].class,
                        String.class,
                        String.class)),
                false);
          }
          for (Reference.Method method : references[i].methods) {
            mv.visitLdcInsn(method.sources.length);
            mv.visitTypeInsn(
                Opcodes.ANEWARRAY, "datadog/trace/agent/tooling/muzzle/Reference$Source");
            int j = 0;
            for (Reference.Source source : method.sources) {
              mv.visitInsn(Opcodes.DUP);
              mv.visitLdcInsn(j);

              mv.visitTypeInsn(Opcodes.NEW, "datadog/trace/agent/tooling/muzzle/Reference$Source");
              mv.visitInsn(Opcodes.DUP);
              mv.visitLdcInsn(source.name);
              mv.visitLdcInsn(source.line);
              mv.visitMethodInsn(
                  Opcodes.INVOKESPECIAL,
                  "datadog/trace/agent/tooling/muzzle/Reference$Source",
                  "<init>",
                  "(Ljava/lang/String;I)V",
                  false);

              mv.visitInsn(Opcodes.AASTORE);
              ++j;
            }

            mv.visitLdcInsn(method.flags.length);
            mv.visitTypeInsn(
                Opcodes.ANEWARRAY, "datadog/trace/agent/tooling/muzzle/Reference$Flag");
            j = 0;
            for (Reference.Flag flag : method.flags) {
              mv.visitInsn(Opcodes.DUP);
              mv.visitLdcInsn(j);
              mv.visitFieldInsn(
                  Opcodes.GETSTATIC,
                  "datadog/trace/agent/tooling/muzzle/Reference$Flag",
                  flag.name(),
                  "Ldatadog/trace/agent/tooling/muzzle/Reference$Flag;");
              mv.visitInsn(Opcodes.AASTORE);
              ++j;
            }

            mv.visitLdcInsn(method.name);
            mv.visitLdcInsn(method.methodType);
            mv.visitMethodInsn(
                Opcodes.INVOKEVIRTUAL,
                "datadog/trace/agent/tooling/muzzle/Reference$Builder",
                "withMethod",
                Type.getMethodDescriptor(
                    Reference.Builder.class.getMethod(
                        "withMethod",
                        Reference.Source[].class,
                        Reference.Flag[].class,
                        String.class,
                        String.class)),
                false);
          }
          mv.visitMethodInsn(
              Opcodes.INVOKEVIRTUAL,
              "datadog/trace/agent/tooling/muzzle/Reference$Builder",
              "build",
              "()Ldatadog/trace/agent/tooling/muzzle/Reference;",
              false);
          mv.visitInsn(Opcodes.AASTORE);
        }

        mv.visitMethodInsn(
            Opcodes.INVOKESPECIAL,
            "datadog/trace/agent/tooling/muzzle/ReferenceMatcher",
            "<init>",
            "([Ljava/lang/String;[Ldatadog/trace/agent/tooling/muzzle/Reference;)V",
            false);

        mv.visitFieldInsn(
            Opcodes.PUTSTATIC,
            muzzleClassName,
            MUZZLE_FIELD_NAME,
            Type.getDescriptor(ReferenceMatcher.class));

        mv.visitInsn(Opcodes.RETURN);

        mv.visitMaxs(0, 0);
        mv.visitEnd();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }

      return cw.toByteArray();
    }
  }
}
